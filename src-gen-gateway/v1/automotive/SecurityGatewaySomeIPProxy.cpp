/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/automotive/SecurityGatewaySomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace automotive {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createSecurityGatewaySomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< SecurityGatewaySomeIPProxy>(_address, _connection);
}

void initializeSecurityGatewaySomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:automotive.SecurityGateway:v1_0:gateway_service",
        0x1234, 0x5678, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "automotive.SecurityGateway:v1_0",
        &createSecurityGatewaySomeIPProxy);
}

INITIALIZER(registerSecurityGatewaySomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeSecurityGatewaySomeIPProxy);
}

SecurityGatewaySomeIPProxy::SecurityGatewaySomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection)
{
}

SecurityGatewaySomeIPProxy::~SecurityGatewaySomeIPProxy() {
    completed_.set_value();
}



void SecurityGatewaySomeIPProxy::requestSessionKey(uint32_t _nodeID, uint64_t _nonce, uint64_t _timestamp, std::vector< uint8_t > _publicKey, std::vector< uint8_t > _signature, CommonAPI::CallStatus &_internalCallStatus, bool &_success, std::vector< uint8_t > &_gatewayPublicKey, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_nodeID(_nodeID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_nonce(_nonce, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_timestamp(_timestamp, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_publicKey(_publicKey, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_signature(_signature, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_success(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_gatewayPublicKey(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                uint64_t,
                CommonAPI::SomeIP::IntegerDeployment<uint64_t>
            >,
            CommonAPI::Deployable<
                uint64_t,
                CommonAPI::SomeIP::IntegerDeployment<uint64_t>
            >,
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >,
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >,
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7b),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_nodeID, deploy_nonce, deploy_timestamp, deploy_publicKey, deploy_signature,
        _internalCallStatus,
        deploy_success, deploy_gatewayPublicKey);
    _success = deploy_success.getValue();
    _gatewayPublicKey = deploy_gatewayPublicKey.getValue();
}

std::future<CommonAPI::CallStatus> SecurityGatewaySomeIPProxy::requestSessionKeyAsync(const uint32_t &_nodeID, const uint64_t &_nonce, const uint64_t &_timestamp, const std::vector< uint8_t > &_publicKey, const std::vector< uint8_t > &_signature, RequestSessionKeyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_nodeID(_nodeID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_nonce(_nonce, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_timestamp(_timestamp, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_publicKey(_publicKey, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_signature(_signature, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_success(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_gatewayPublicKey(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                uint64_t,
                CommonAPI::SomeIP::IntegerDeployment<uint64_t>
            >,
            CommonAPI::Deployable<
                uint64_t,
                CommonAPI::SomeIP::IntegerDeployment<uint64_t>
            >,
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >,
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >,
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7b),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_nodeID, deploy_nonce, deploy_timestamp, deploy_publicKey, deploy_signature,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment > _success, CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> > > _gatewayPublicKey) {
            if (_callback)
                _callback(_internalCallStatus, _success.getValue(), _gatewayPublicKey.getValue());
        },
        std::make_tuple(deploy_success, deploy_gatewayPublicKey));
}

void SecurityGatewaySomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> SecurityGatewaySomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace automotive
} // namespace v1
